name: Abstract Plugin

on:
  workflow_call:
    inputs:
      version:
        description: 'Build version'
        required: true
        type: string
        default: '2.0.0'
      is-release:
        description: 'Release'
        type: boolean
        default: false
      plugin-folder:
        description: 'Plugin source files folder'
        type: string
        required: true
      files-to-sign:
        description: 'Files to sign (comma-separated list)'
        type: string
        required: true


jobs:

  build:

    name: Build ${{ inputs.version }}
    runs-on: windows-latest
    env:
      Scripts: .\.github\workflows\scripts
      TemporaryPfxFilePath: .\GitHubActionsWorkflow.pfx
      PublishOutputPath: .\${{ inputs.plugin-folder }}\bin\Release\net7.0-windows\publish
      DistributionZipFilePath: .\${{ inputs.plugin-folder }}.zip

    steps:
    - name: Checkout
      uses: actions/checkout@v4.0.0
      with:
        fetch-depth: 0

    - name: Install .NET
      uses: actions/setup-dotnet@v3.2.0
      with:
        dotnet-version: 7.0.x

    - name: Publish
      run: |
        dotnet publish ./${{ inputs.plugin-folder }}/${{ inputs.plugin-folder }}.csproj `
          -c Release `
          -o ${{ env.PublishOutputPath }} `
          --nologo `
          /p:Version=${{ inputs.version }}

    - name: Sign code files
      run: |
        ${{ env.Scripts }}\DecodePfx.ps1 `
          -Base64Pfx "${{ secrets.BASE64_ENCODED_PFX }}" `
          -OutputPath ${{ env.TemporaryPfxFilePath }}
        ${{ env.Scripts }}\SignMyCodeFiles.ps1 `
          -FilesDirectoryPath ${{ env.PublishOutputPath }} `
          -PfxFilePath ${{ env.TemporaryPfxFilePath }} `
          -PfxPassword ${{ secrets.PFX_KEY }} `
          -FileNamesToInclude ${{ inputs.files-to-sign }}
        Remove-Item -Path ${{ env.TemporaryPfxFilePath }}

    - name: Zip
      run: Compress-Archive -Path ${{ env.PublishOutputPath }}\* -DestinationPath ${{ env.DistributionZipFilePath }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3.1.2
      with:
        if-no-files-found: error
        name: Output
        path: |
          ${{ env.DistributionZipFilePath }}
          .\${{ inputs.plugin-folder }}\ReleaseNotes.md


  github-release:

    name: Release ${{ inputs.version }}
    if: github.event_name != 'pull_request' && ${{ inputs.is-release }}
    needs: build
    runs-on: windows-latest

    steps:
    - name: test
      run: Write-Host ${{ inputs.is-release }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3.0.2

    - name: GitHub release
      uses: softprops/action-gh-release@v0.1.14
      with:
        tag_name: ${{ inputs.version }}
        draft: true
        files: '**/*.zip'
        body_path: 'Output/${{ inputs.plugin-folder }}/ReleaseNotes.md'
        fail_on_unmatched_files: true
